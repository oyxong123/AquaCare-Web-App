@page "/dashboard"
@using Models.Dtos
@using Services
@inject ISensorService ISensorService

<MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="5">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h5" Class="d-flex" Style="justify-content: center; font-weight:bold;">Priority</MudText>
                    <MudDivider />
                    <MudStack Spacing="1">
                        @foreach (SensorDto model in modelPriorityList)
                        {
                            if (model.Priority > 5)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#f21616">

                                </MudPaper>
                            }
                            else if (model.Priority > 4)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#ed4734">

                                </MudPaper>
                            }
                            else if (model.Priority > 3)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#e88d43">

                                </MudPaper>
                            }
                            else if (model.Priority > 2)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#e8cf43">

                                </MudPaper>
                            }
                            else if (model.Priority > 1)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#ace340">

                                </MudPaper>
                            }
                            else if (model.Priority < -5)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#f21616">
                                    
                                </MudPaper>
                            }
                            else if (model.Priority < -4)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#ed4734">

                                </MudPaper>
                            }
                            else if (model.Priority < -3)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#e88d43">

                                </MudPaper>
                            }
                            else if (model.Priority < -2)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#e8cf43">

                                </MudPaper>
                            }
                            else if (model.Priority < -1)
                            {
                                <MudPaper Elevation="1" Class="pa-4" Style="height: 60px; background-color:#ace340">

                                </MudPaper>
                            }
                        }
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 260px;">
                        <MudCarousel Class="mud-width-full" Style="height: 100%" AutoCycle="true" TData="object">
                            <MudCarouselItem Transition="Transition.Slide" Style="height: 100%; padding-left: 50px; padding-right: 50px; padding-bottom: 50px;">
                                <RadzenChart Style="height: 100%">
                                    @foreach (List<SensorDto> modelRecordList in modelRecordLists)
                                    {
                                        <RadzenLineSeries Data="@modelRecordList" ValueProperty="Ph" CategoryProperty="Timestamp" Title="@modelRecordList.First().Model" LineType="LineType.Solid">
                                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                                            <RadzenSeriesDataLabels />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth">
                                        <RadzenAxisTitle Text="Day" />
                                    </RadzenCategoryAxis>
                                    <RadzenValueAxis>
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="pH" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </MudCarouselItem>
@* 
                            <MudCarouselItem Transition="Transition.Slide" Style="height: 100%">
                                <RadzenChart>
                                    @foreach (List<SensorDto> modelRecordList in modelRecordLists)
                                    {
                                        <RadzenLineSeries Data="@modelRecordList" ValueProperty="Ph" CategoryProperty="Day" Title="@modelRecordList.First().Model" LineType="LineType.Solid">
                                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                                            <RadzenSeriesDataLabels />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                                    <RadzenValueAxis>
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="pH" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </MudCarouselItem>
                            <MudCarouselItem Transition="Transition.Slide" Style="height: 100%">
                                <RadzenChart>
                                    @foreach (List<SensorDto> modelRecordList in modelRecordLists)
                                    {
                                        <RadzenLineSeries Data="@modelRecordList" ValueProperty="Ph" CategoryProperty="Day" Title="@modelRecordList.First().Model" LineType="LineType.Solid">
                                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                                            <RadzenSeriesDataLabels />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                                    <RadzenValueAxis>
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="pH" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </MudCarouselItem>
                            <MudCarouselItem Transition="Transition.Slide" Style="height: 100%">
                                <RadzenChart>
                                    @foreach (List<SensorDto> modelRecordList in modelRecordLists)
                                    {
                                        <RadzenLineSeries Data="@modelRecordList" ValueProperty="Ph" CategoryProperty="Day" Title="@modelRecordList.First().Model" LineType="LineType.Solid">
                                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                                            <RadzenSeriesDataLabels />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                                    <RadzenValueAxis>
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="pH" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </MudCarouselItem>
                            <MudCarouselItem Transition="Transition.Slide" Style="height: 100%">
                                <RadzenChart>
                                    @foreach (List<SensorDto> modelRecordList in modelRecordLists)
                                    {
                                        <RadzenLineSeries Data="@modelRecordList" ValueProperty="Ph" CategoryProperty="Day" Title="@modelRecordList.First().Model" LineType="LineType.Solid">
                                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                                            <RadzenSeriesDataLabels />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                                    <RadzenValueAxis>
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="pH" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            </MudCarouselItem> *@
                        </MudCarousel>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                        @foreach (SensorDto modelRecordAverage in modelRecordAverageList)
                        {
                            
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    List<SensorDto> modelAllRecordList = [];  // List of all records from each model.
    List<SensorDto> latestModelRecordList = [];  // List of latest record from each model.
    List<SensorDto> modelPriorityList = [];  // List of records that requires attention.
    List<SensorDto> modelRecordAverageList = [];  // List of average record from each model.
    List<List<SensorDto>> modelRecordLists = [];  // List of list of records from all models.
    List<string> modelList = [];  // List of all model names.
    decimal optimalPh = 7;
    decimal optimalTemp = 22.5m;
    decimal optimalSun = 400;
    decimal optimalTurb = 2.6m;
    decimal optimalSal = 35;

    protected async override Task OnInitializedAsync()
    {
        modelAllRecordList = await ISensorService.GetAllLatestSystemsRecordFromLastSevenDays();
        modelList = modelAllRecordList.Select(u => u.Model).Distinct().ToList();
        foreach (string model in modelList)
        {
            SensorDto latestRecord = modelAllRecordList.Where(u => u.Model == model).MaxBy(u => u.Timestamp) 
                                        ?? throw new Exception("No model found.");
            latestModelRecordList.Add(latestRecord);

            List<SensorDto> modelRecordList = modelAllRecordList.Where(u => u.Model == model).ToList();  // List of all records for the specific model.
            modelRecordLists.Add(modelRecordList);

            // Calculate average properties from the past 7 days for all models.
            SensorDto modelRecordAverage = new();
            modelRecordAverage.Model = model;
            modelRecordAverage.Ph = modelRecordList.Average(u => u.Ph);
            modelRecordAverage.Temperature = modelRecordList.Average(u => u.Temperature);
            modelRecordAverage.SunlightIntensity = modelRecordList.Average(u => u.SunlightIntensity);
            modelRecordAverage.Turbidity = modelRecordList.Average(u => u.Turbidity);
            modelRecordAverage.Salinity = modelRecordList.Average(u => u.Salinity);
            modelRecordAverageList.Add(modelRecordAverage);
        }

        // Find detected abnormalities from all systems.
        foreach (SensorDto latestRecord in latestModelRecordList)
        {
            decimal ph = latestRecord.Ph;
            decimal temp = latestRecord.Temperature;
            decimal sun = latestRecord.SunlightIntensity;
            decimal turb = latestRecord.Turbidity;
            decimal sal = latestRecord.Salinity;
            decimal deviationPh, deviationTemp, deviationSun, deviationTurb, deviationSal;

            // Positive value indicate too high, negative value indicate too low.
            deviationPh = ph - optimalPh;
            deviationTemp = (temp - optimalTemp) / 2;
            deviationSun = (sun - optimalSun) / 10;
            deviationTurb = (turb - optimalTurb) / 0.3m;
            deviationSal = (sal - optimalSal) / 2;

            // Find the highest emergency deviation, either positive or negative
            List<decimal> deviationList = [deviationPh, deviationTemp, deviationSun, deviationTurb, deviationSal];
            decimal deviationMax = deviationList.Max();
            decimal deviationMin = deviationList.Min();
            latestRecord.Priority = deviationMax > Math.Abs(deviationMin) 
                ? deviationMax 
                : deviationMin;
            latestRecord.PriorityAbsolute = deviationMax > Math.Abs(deviationMin)
            ? deviationMax
            : Math.Abs(deviationMin);

            if (latestRecord.Priority > 1 || latestRecord.Priority < -1)
            {
                latestRecord.PhDeviationIndex = deviationPh;
                latestRecord.TemperatureDeviationIndex = deviationTemp;
                latestRecord.SunlightIntensityDeviationIndex = deviationSun;
                latestRecord.TurbidityDeviationIndex = deviationTurb;
                latestRecord.SalinityDeviationIndex = deviationSal;
                modelPriorityList.Add(latestRecord);
            }
        }

        modelPriorityList = modelPriorityList.OrderByDescending(u => u.PriorityAbsolute).ToList();
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("ddd");
        }

        return string.Empty;
    }
}
